{"version":3,"sources":["theme.tsx","api/AppApi.tsx","state/weather-state.tsx","components/icons/LoadingIcon.tsx","components/LoagingIndicator.tsx","App.tsx","serviceWorker.ts","locale/i18n.tsx","locale/en.tsx","locale/de.tsx","index.tsx"],"names":["lightTheme","background","main","paper","primary","light","dark","text","secondary","action","active","disabled","favorite","border","icon","temperature","cold","warm","shadow","mobileBreakPoint","tabletBreakPoint","AppApi","WeatherAPIKey","this","process","fetch","response","json","data","status","cities","records","map","r","name","fields","accentcity","country","region","sort","a","b","localeCompare","errorHandler","cityName","url","fetchWeather","lat","lon","weather","city","location","current","last_updated_epoch","last_updated","temp_c","temp_f","is_day","condition","code","wind_mph","wind_kph","wind_degree","wind_dir","pressure_mb","pressure_in","precip_mm","precip_in","humidity","cloud","feelslike_c","feelslike_f","vis_km","vis_miles","uv","gust_mph","gust_kph","updated_at","Date","query","c","err","message","includes","Error","console","log","WeatherState","types","model","number","string","views","self","CityState","id","identifier","note","optional","currentWeather","maybeNull","isUpdated","now","getTime","isFavorite","getParentOfType","AppState","favoriteCities","findIndex","actions","setCurrentWeather","create","setNote","LookupResultState","topCities","array","reference","lookup","lookupResult","lookupActiveIndex","offline","boolean","findCity","get","setOffline","setOnline","addToTopCity","index","push","splice","removeFromTopCity","setTopCities","clear","forEach","cityRef","put","addToFavorite","removeFromFavorite","addCityWeather","removeCityWeather","delete","setLookupResult","result","setLookupActiveIndex","setLookup","getEnv","api","fetchLookup","undefined","updateCurrentWeather","Promise","all","values","fetchWeatherForCity","addedCity","currentLocationWeather","navigator","geolocation","resolve","rejected","getCurrentPosition","position","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","enableHighAccuracy","timeout","fetchWeatherForLocation","coords","latitude","longitude","init","length","fetchTopCities","fetchCity","AppStoreContext","React","createContext","AppStateProvider","children","store","useLocalStore","createStore","Provider","value","useAppState","useContext","injection","snapshot","localStorage","getItem","JSON","parse","error","createSnapshot","onSnapshot","saveSnapshot","setItem","stringify","LoadingIcon","props","xmlns","style","margin","display","viewBox","preserveAspectRatio","transform","x","y","rx","ry","width","height","fill","attributeName","keyTimes","dur","begin","repeatCount","useStyles","createUseStyles","theme","loading","color","heigh","LoadingIndicator","useTheme","classes","role","className","NoMatch","lazy","Home","CityWeather","CurrentLocationWeather","html","backgroundColor","body","textDecoration","fontFamily","boxSizing","WebkitFontSmoothing","MozOsxFontSmoothing","WebkitTextSizeAdjust","App","basename","path","exact","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","resources","en","translation","de","i18n","use","initReactI18next","lng","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","document","getElementById","URL","href","origin","addEventListener","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b2dc40d9.chunk.js","sourcesContent":["export { createUseStyles, useTheme } from 'react-jss';\n\nexport const lightTheme = {\n  background: {\n    main: '#f5f5f5',\n    paper: '#fff',\n  },\n  primary: {\n    main: '#3d5afe',\n    light: '#8187ff',\n    dark: '#43658b',\n    text: '#fff'\n  },\n  secondary: {\n    main: '#4e89ae',\n    light: '#718792',\n    dark: '#1c313a',\n    text: '#fff',\n  },\n  action: {\n    active: '#333333',\n    disabled: '#999999',\n    favorite: '#ed6663',\n  },\n  border: {\n    main: '#999999',\n  },\n  icon: {\n    main: '#717171',\n  },\n  text: {\n    primary: '#333333',\n    secondary: '#666666',\n  },\n  temperature: {\n    cold: 'blue',\n    warm: 'red',\n  },\n  shadow: {\n    paper: '0 2px 8px rgba(0, 0, 0, 0.15)',\n  },\n  mobileBreakPoint: 480,\n  tabletBreakPoint: 1024,\n}\n\nexport type Theme = typeof lightTheme;\n\n","\nexport interface IWeatherData {\n  city: ICity,\n  current: {\n    \"last_updated_epoch\": number,\n    \"last_updated\": string,\n    \"temp_c\": number,\n    \"temp_f\": number,\n    \"is_day\": number,\n    \"condition\": {\n      \"text\": string,\n      \"icon\": string,\n      \"code\": number,\n    },\n    \"wind_mph\": number,\n    \"wind_kph\": number,\n    \"wind_degree\": number,\n    \"wind_dir\": string,\n    \"pressure_mb\": number,\n    \"pressure_in\": number,\n    \"precip_mm\": number,\n    \"precip_in\": number,\n    \"humidity\": number,\n    \"cloud\": number,\n    \"feelslike_c\": number,\n    \"feelslike_f\": number,\n    \"vis_km\": number,\n    \"vis_miles\": number,\n    \"uv\": number,\n    \"gust_mph\": number,\n    \"gust_kph\": number,\n    updated_at: Date,\n  }\n}\n\nexport interface ICity {\n  name: string,\n  country: string,\n  region: string,\n}\n\nexport interface TAppApi {\n  fetchTopCities(): Promise<ICity[] | undefined>;\n  fetchWeatherForCity(cityName: string): Promise<IWeatherData | undefined>;\n  fetchWeatherForLocation(lat: number, lon: number): Promise<IWeatherData | undefined>;\n  fetchWeatherForMyIP(): Promise<IWeatherData | undefined>;\n  fetchWeather(url: string): Promise<IWeatherData | undefined>;\n  fetchLookup(query: string): Promise<ICity[] | undefined>;\n}\n\nexport class AppApi implements TAppApi{\n  private WeatherAPIKey: string;\n\n  constructor() {\n    // Setting api key in front-end is a bad practice and not secure,\n    // but as the requirement is to avoid having back-end there is no other way \n    this.WeatherAPIKey = process.env.REACT_APP_WEATHERAPI_API_KEY || '';\n  }\n\n  async fetchTopCities(): Promise<ICity[] | undefined> {\n    const url = `https://public.opendatasoft.com/api/records/1.0/search/?dataset=worldcitiespop&q=&rows=15&sort=population&facet=country`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json() as { records: any[] };\n      if(response.status===200){\n        const cities = data?.records?.map((r: any) => ({\n          name: (r?.fields?.accentcity || r?.fields?.name) as string,\n          country: r?.fields?.country as string,\n          region: r?.fields?.region as string,\n        })).sort((a, b) => a.name.localeCompare(b.name));\n        return cities;\n      }else{\n      }\n    } catch (err) {\n      this.errorHandler(err);\n    }\n  }\n\n  async fetchWeatherForCity(cityName: string): Promise<IWeatherData | undefined> {\n    const url = `https://api.weatherapi.com/v1/current.json?key=${this.WeatherAPIKey}&q=${cityName}`;\n    // docs under https://www.weatherapi.com/api-explorer.aspx\n    return this.fetchWeather(url);\n  }\n\n  async fetchWeatherForLocation(lat: number, lon: number): Promise<IWeatherData | undefined> {\n    const url = `https://api.weatherapi.com/v1/current.json?key=${this.WeatherAPIKey}&query=${lat},${lon}`;\n    return this.fetchWeather(url);\n  }\n\n  async fetchWeatherForMyIP(): Promise<IWeatherData | undefined> {\n    const url = `https://api.weatherapi.com/v1/current.json?key=${this.WeatherAPIKey}&query=fetch:ip`;\n    return this.fetchWeather(url);\n  }\n\n  async fetchWeather(url: string): Promise<IWeatherData | undefined> {\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      if(response.status===200){\n        const weather = {\n          city: {\n            name: data.location.name,\n            country: data.location.country,\n            region: data.location.region || 'x',\n          },\n          current: {\n            \"last_updated_epoch\": data.current.last_updated_epoch,\n            \"last_updated\": data.current.last_updated,\n            \"temp_c\": data.current.temp_c,\n            \"temp_f\": data.current.temp_f,\n            \"is_day\": data.current.is_day,\n            \"condition\": {\n              \"text\": data.current.condition.text,\n              \"icon\": data.current.condition.icon,\n              \"code\": data.current.condition.code,\n            },\n            \"wind_mph\": data.current.wind_mph,\n            \"wind_kph\": data.current.wind_kph,\n            \"wind_degree\": data.current.wind_degree,\n            \"wind_dir\": data.current.wind_dir,\n            \"pressure_mb\": data.current.pressure_mb,\n            \"pressure_in\": data.current.pressure_in,\n            \"precip_mm\": data.current.precip_mm,\n            \"precip_in\": data.current.precip_in,\n            \"humidity\": data.current.humidity,\n            \"cloud\": data.current.cloud,\n            \"feelslike_c\": data.current.feelslike_c,\n            \"feelslike_f\": data.current.feelslike_f,\n            \"vis_km\": data.current.vis_km,\n            \"vis_miles\": data.current.vis_miles,\n            \"uv\": data.current.uv,\n            \"gust_mph\": data.current.gust_mph,\n            \"gust_kph\": data.current.gust_kph,\n            updated_at: new Date(),\n          }\n        };\n        return weather;\n      }else{\n        // {\"error\":{\"code\":2006,\"message\":\"API key is invalid.\"}}\n      }\n    } catch (err) {\n      this.errorHandler(err);\n    }\n  }\n\n  async fetchLookup(query: string): Promise<ICity[] | undefined> {\n    const url = `https://api.weatherapi.com/v1/search.json?key=${this.WeatherAPIKey}&q=${query}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json() as any[];\n      if(response.status===200){\n        const cities = data.map( c => ({\n          name: c.name,\n          region: c.region || 'x',\n          country: c.country,\n        }));\n        return cities;\n      }else{\n        // {\"error\":{\"code\":2006,\"message\":\"API key is invalid.\"}}\n      }\n    } catch (err) {\n      this.errorHandler(err);\n    }\n  }\n\n  errorHandler (err: any){\n    if(err.message?.includes('NetworkError') || err.message?.includes('Failed to fetch')){\n      throw new Error('NetworkError');\n    }else{\n      console.log(err);\n      throw new Error('UnknownError');\n    }\n  }\n\n}\n\n","import React from 'react';\nimport { useLocalStore } from 'mobx-react-lite';\nimport { types, Instance, SnapshotIn, onSnapshot, getParentOfType, getEnv } from \"mobx-state-tree\";\nimport { AppApi, ICity, IWeatherData, TAppApi } from '../api/AppApi';\nimport { MockAppApi } from '../api/MockAppApi';\n\nconst WeatherDataTTL = 10 * 60 * 1000;\n\nexport const WeatherState = types\n  .model(\"WeatherState\", {\n    \"last_updated_epoch\": types.number,\n    \"last_updated\": types.string,\n    \"temp_c\": types.number,\n    \"temp_f\": types.number,\n    \"is_day\": types.number,\n    \"condition\": types.model({\n        \"text\": types.string,\n        \"icon\": types.string,\n        \"code\": types.number,\n    }),\n    \"wind_mph\": types.number,\n    \"wind_kph\": types.number,\n    \"wind_degree\": types.number,\n    \"wind_dir\": types.string,\n    \"pressure_mb\": types.number,\n    \"pressure_in\": types.number,\n    \"precip_mm\": types.number,\n    \"precip_in\": types.number,\n    \"humidity\": types.number,\n    \"cloud\": types.number,\n    \"feelslike_c\": types.number,\n    \"feelslike_f\": types.number,\n    \"vis_km\": types.number,\n    \"vis_miles\": types.number,\n    \"uv\": types.number,\n    \"gust_mph\": types.number,\n    \"gust_kph\": types.number,\n    updated_at: types.Date,\n  })\n  .views(self => {\n    return {\n      get lastUpdate () {\n        return new Date(self.last_updated_epoch *  1000);\n      },\n    }\n  });\n\nexport const CityState = types\n  .model(\"CityState\", {\n    id: types.identifier,\n    name: types.string,\n    country: types.string,\n    region: types.string,\n    note: types.optional(types.string, ''),\n    currentWeather: types.maybeNull(WeatherState),\n  })\n  .views(self => {\n    return {\n      isUpdated(now: Date){\n        return now.getTime() - (self.currentWeather?.updated_at.getTime() || 0) < WeatherDataTTL;\n      },\n      isFavorite(): boolean{\n        const parent = getParentOfType(self, AppState);\n        const index = parent.favoriteCities.findIndex( c => c === self);\n        return index !== -1;\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      setCurrentWeather(weather: IWeatherData){\n        self.currentWeather = WeatherState.create(weather.current);\n      },\n      setNote(note: string){\n        self.note = note;\n      }\n    }\n  });\n\nexport const LookupResultState = types\n  .model(\"LookupResultState\", {\n    name: types.string,\n    country: types.string,\n    region: types.string,\n  });\n\nexport const AppState = types\n  .model(\"AppState\", {\n    topCities: types.array(types.reference(CityState)),\n    favoriteCities: types.array(types.reference(CityState)),\n    cities: types.map(CityState),\n    lookup: types.optional(types.string, ''),\n    lookupResult: types.array(LookupResultState),\n    lookupActiveIndex: types.maybeNull(types.number),\n    offline: types.optional(types.boolean, false),\n  })\n  .views(self => {\n    return {\n      findCity(country: string, region: string, name: string): ICityState | undefined{\n        const city = self.cities.get(`${country}/${region}/${name}`);\n        return city;\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      setOffline() {\n        !self.offline && (self.offline = true);\n      },\n      setOnline() {\n        self.offline && (self.offline = false);\n      },\n      addToTopCity(city: ICityState) {\n        const index = self.topCities.findIndex( c => c.name.localeCompare(city.name) > 0);\n        if(index === -1){\n          self.topCities.push(city);\n        }else{\n          self.topCities.splice(index, 0, city);\n        }\n      },\n      removeFromTopCity(city: ICityState) {\n        const index = self.topCities.findIndex( c => c === city);\n        if(index !== -1){\n          self.topCities.splice(index, 1);\n        }\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      setTopCities(cities: ICity[]) {\n        self.topCities.clear();\n        cities.forEach( city => {\n          const cityRef = self.cities.put(CityState.create({\n            id: `${city.country}/${city.region}/${city.name}`,\n            name: city.name,\n            country: city.country,\n            region: city.region,\n          }));\n          if(!cityRef.isFavorite()){\n            self.topCities.push(cityRef);\n          }\n        });\n      },\n      addToFavorite(city: ICityState) {\n        const index = self.favoriteCities.findIndex( c => c.name.localeCompare(city.name) > 0);\n        if(index === -1){\n          self.favoriteCities.push(city);\n        }else{\n          self.favoriteCities.splice(index, 0, city);\n        }\n        self.removeFromTopCity(city);\n      },\n      removeFromFavorite(city: ICityState) {\n        const index = self.favoriteCities.findIndex( c => c === city);\n        if(index !== -1){\n          self.favoriteCities.splice(index, 1);\n        }\n      },\n      addCityWeather(weather: IWeatherData): ICityState{\n        const cityRef = self.cities.put(CityState.create({\n          id: `${weather.city.country}/${weather.city.region}/${weather.city.name}`,\n          name: weather.city.name,\n          country: weather.city.country,\n          region: weather.city.region,\n          currentWeather: WeatherState.create(weather.current),\n        }));\n        return cityRef;\n      },\n      removeCityWeather(city: ICityState){\n        self.cities.delete(city.id);\n      },\n      setLookupResult(result?: ICity[]){\n        self.lookupResult.clear();\n        self.lookupActiveIndex = null;\n        result && self.lookupResult.push(...result);\n      },\n      setLookupActiveIndex(index: number | null){\n        self.lookupActiveIndex = index;\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      async setLookup(query: string) {\n        self.lookup = query;\n        if(self.lookup){\n          try{\n            const result = await getEnv<EnvType>(self).api.fetchLookup(query);\n              self.setOnline();\n            if(self.lookup === query){\n              self.setLookupResult(result);\n            }\n          }catch(err){\n            if(err.message === 'NetworkError'){\n              self.setOffline();\n            }\n          }\n        }else{\n          self.setLookupResult(undefined);\n        }\n      },\n      async updateCurrentWeather(){\n        const api = getEnv<EnvType>(self).api;\n        const now = new Date();\n        await Promise.all([...self.cities.values()].map( async (city) => {\n          if(city.isUpdated(now)){\n            return;\n          }\n          try{\n            const weather = await api.fetchWeatherForCity(city.name);\n            self.setOnline();\n            if(weather){\n              if(`${weather.city.country}/${weather.city.region}/${weather.city.name}` === city.id){\n                city.setCurrentWeather(weather);\n              }else{\n                const addedCity = self.addCityWeather(weather);\n                self.removeFromTopCity(city);\n                self.removeFromFavorite(city);\n                self.removeCityWeather(city);\n                self.addToTopCity(addedCity);\n              }\n            }\n          }catch(err){\n            if(err.message === 'NetworkError'){\n              self.setOffline();\n            }\n          }\n        }));\n      },\n      async currentLocationWeather(): Promise<ICityState> {\n        if(!navigator.geolocation){\n          throw new Error('no_location_service');\n        }\n        const position = await new Promise<Position>((resolve, rejected) => {\n          navigator.geolocation.getCurrentPosition((position) => {\n            resolve(position);\n          }, (err) => {\n            if(err.code === err.PERMISSION_DENIED){\n              rejected(new Error('permission_denied'));\n            }\n            if(err.code === err.POSITION_UNAVAILABLE){\n              rejected(new Error('position_unavailable'));\n            }\n            if(err.code === err.TIMEOUT){\n              rejected(new Error('timeout'));\n            }\n          }, {\n            enableHighAccuracy: false,\n            timeout: 60 * 100,\n          });\n        });\n        const weather = await getEnv<EnvType>(self).api.fetchWeatherForLocation(position.coords.latitude, position.coords.longitude);\n        if(weather){\n          const city = self.addCityWeather(weather);\n          return city;\n        }else{\n          throw new Error('no_weather_for_your_location');\n        }\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      async init() {\n        if(!self.topCities?.length){\n          try{\n            const cities = await getEnv<EnvType>(self).api.fetchTopCities();\n            self.setOnline();\n            if(cities){\n              self.setTopCities(cities);\n            }\n          }catch(err){\n            if(err.message === 'NetworkError'){\n              self.setOffline();\n            }\n          }\n        }\n        await self.updateCurrentWeather();\n      },\n      async fetchCity(cityName: string): Promise<ICityState | undefined>{\n        try{\n          const weather = await getEnv<EnvType>(self).api.fetchWeatherForCity(cityName);\n          self.setOnline();\n          if(weather){\n            const city = self.addCityWeather(weather);\n            return city;\n          }\n        }catch(err){\n          if(err.message === 'NetworkError'){\n            self.setOffline();\n          }\n        }\n      }\n    }\n  });\n\nexport const AppStoreContext = React.createContext<IAppState | null>(null);\n\nexport const AppStateProvider: React.FunctionComponent = ({ children }) => {\n  const store = useLocalStore(createStore)\n  return <AppStoreContext.Provider value={store}>{children}</AppStoreContext.Provider>\n}\n\nexport const useAppState = () => {\n  const store = React.useContext(AppStoreContext)\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error('useStore must be used within a StoreProvider.')\n  }\n  return store;\n}\n\nexport type EnvType = {\n  api: TAppApi,\n}\n\nexport function createStore() {\n  const injection: EnvType = {\n    api: new AppApi(),\n  }\n\n  let store;\n  try {\n    store = AppState.create(createSnapshot(), injection);\n  } catch (err) {\n    console.error('could not restore, with the following error. fallback to empty store.');\n    console.error(err);\n    store = AppState.create(emptyStore(), injection);\n  }\n  onSnapshot(store, saveSnapshot);\n\n  return store;\n}\n\nexport function createTestStore(snapshot: IAppStateSnapshot, mockApi?: TAppApi): IAppState {\n  const injection: EnvType = {\n    api: mockApi || new MockAppApi(),\n  }\n\n  const store = AppState.create(snapshot, injection);\n\n  return store;\n}\n\nexport const SNAPSHOT_KEY = 'app-store';\n\nexport function createSnapshot(): IAppStateSnapshot {\n  const snapshot = localStorage.getItem(SNAPSHOT_KEY);\n\n  try{\n    return snapshot ? JSON.parse(snapshot) : emptyStore();\n  } catch (err) {\n    console.error('could not restore, with the following error. fallback to empty store.');\n    console.error(err);\n    return emptyStore();\n  }\n}\n\nexport function saveSnapshot(snapshot: IAppStateSnapshot) {\n  localStorage.setItem(SNAPSHOT_KEY, JSON.stringify(snapshot));\n}\n\nfunction emptyStore(): IAppStateSnapshot {\n  return {};\n}\n\nexport interface IAppState extends Instance<typeof AppState> { };\nexport interface IAppStateSnapshot extends SnapshotIn<typeof AppState> { };\nexport interface ICityState extends Instance<typeof CityState> { };\nexport interface IWeatherState extends Instance<typeof WeatherState> { };","import React from 'react';\n\nconst LoadingIcon: React.FC<any> = ({ ...props }) => {\n  return (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" style={{margin:'auto', display:'block'}} viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\" {...props}>\n      <g transform=\"rotate(0 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-1.6233766233766234s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(32.72727272727273 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-1.461038961038961s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(65.45454545454545 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-1.2987012987012987s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(98.18181818181819 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-1.1363636363636362s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(130.9090909090909 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-0.974025974025974s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(163.63636363636363 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-0.8116883116883117s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(196.36363636363637 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-0.6493506493506493s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(229.0909090909091 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-0.487012987012987s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(261.8181818181818 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-0.3246753246753247s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(294.54545454545456 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"-0.16233766233766234s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n      <g transform=\"rotate(327.27272727272725 50 50)\">\n        <rect x=\"48.5\" y=\"28\" rx=\"1.5\" ry=\"1.9000000000000001\" width=\"3\" height=\"10\" fill=\"currentColor\">\n          <animate attributeName=\"opacity\" values=\"1;0\" keyTimes=\"0;1\" dur=\"1.7857142857142856s\" begin=\"0s\" repeatCount=\"indefinite\"></animate>\n        </rect>\n      </g>\n    </svg>\n  )\n}\n\nexport default LoadingIcon;","import React from 'react';\nimport { createUseStyles, useTheme, Theme } from '../theme';\nimport LoadingIcon from './icons/LoadingIcon';\n\nconst useStyles = createUseStyles<Theme>(theme => ({\n  loading: {\n    color: theme.primary.main,\n    width: 50,\n    heigh: 50,\n  },\n}));\n\nconst LoadingIndicator = () => {\n  const theme = useTheme();\n  const classes = useStyles({ theme });\n  return (\n    <LoadingIcon role=\"loading\" className={classes.loading}/>\n  )\n};\n\nexport default LoadingIndicator;","import React, { lazy } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { createUseStyles, useTheme, Theme } from './theme';\nimport { AppStateProvider } from './state/weather-state';\n\nconst NoMatch = lazy(() => import('./pages/NoMatch'));\nconst Home = lazy(() => import('./pages/Home'));\nconst CityWeather = lazy(() => import('./pages/CityWeather'));\nconst CurrentLocationWeather = lazy(() => import('./pages/CurrentLocationWeather'));\n\nconst useStyles = createUseStyles<Theme>(theme => ({\n  '@global': {\n    html: {\n      backgroundColor: theme.background,\n      color: theme.text.primary,\n    },\n    body: {\n      margin: 0,\n    },\n    a: {\n      textDecoration: 'none',\n      color: theme.text.primary,\n    },\n    'html *': {\n      fontFamily: 'Yekan Bakh',\n      boxSizing: 'border-box',\n      WebkitFontSmoothing: 'antialiased', // Antialiasing.\n      MozOsxFontSmoothing: 'grayscale', // Antialiasing.\n      // Fix font resize problem in iOS\n      WebkitTextSizeAdjust: '100%',\n    },\n  },\n\n}));\n\nconst App: React.FC = () => {\n\n  const theme = useTheme();\n  useStyles({ theme });\n\n  return (\n    <AppStateProvider >\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/city/:country/:region/:name\">\n            <CityWeather />\n          </Route>\n          <Route path=\"/currentLocation\">\n            <CurrentLocationWeather />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"*\">\n            <NoMatch />\n          </Route>\n        </Switch>\n      </Router>\n    </AppStateProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport { en } from \"./en\";\nimport { de } from \"./de\";\n\n// the translations\nconst resources = {\n  en,\n  de,\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  });\n\n  export default i18n;","export const en = {\n  translation: {\n    \"home\": \"Home\",\n    \"city_weather_details\": \"City Weather Details\",\n    \"top_city_list_title\": \"Top Cities\",\n    \"favorite_city_list_title\": \"Favorite Cities\",\n    \"feels_like\": \"Feels like\",\n    \"kph\": \"km/h\",\n    \"gust\": \"Gust\",\n    \"uv\": \"UV factor\",\n    \"humidity\": \"Humidity\",\n    \"vis\": \"Visibility\",\n    \"precip\": \"Precipitation\",\n    \"pressure\": \"Pressure\",\n    \"km\": \"Km\",\n    \"mm\": \"mm\",\n    \"mb\": \"hPa\",\n    \"note\": \"Note\",\n    \"version\": \"Version\",\n    \"showCurrentLocationWeather\": \"Show Weather For My Current Location\",\n    \"currentLocationWeather\": \"Weather For My Current Location\",\n    \"no_weather_for_your_location\": \"No Weather For Your Location\",\n    \"permission_denied\": \"Permission Denied\",\n    \"position_unavailable\": \"Position Unavailable\",\n    \"timeout\": \"Timeout\",\n    \"no_location_service\": \"No location service\",\n  }\n}","export const de = {\n  translation: {\n    \"ttest\": \"Das wetter\"\n  }\n}","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'react-jss';\nimport {lightTheme} from './theme';\nimport './locale/i18n';\nimport LoadingIndicator from './components/LoagingIndicator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={lightTheme}>\n      <Suspense fallback={<LoadingIndicator />}>\n        <App />\n      </Suspense>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}