{"version":3,"sources":["theme.tsx","api/AppApi.tsx","state/weather-state.tsx","App.tsx","serviceWorker.ts","locale/i18n.tsx","locale/en.tsx","locale/de.tsx","index.tsx"],"names":["lightTheme","background","main","primary","light","dark","text","secondary","action","active","disabled","border","icon","temperature","cold","warm","mobileBreakPoint","tabletBreakPoint","AppApi","WeatherAPIKey","this","process","fetch","response","json","data","cities","records","map","r","name","fields","accentcity","country","region","sort","a","b","localeCompare","console","log","cityName","url","weather","city","location","current","last_updated_epoch","last_updated","temp_c","temp_f","is_day","condition","code","wind_mph","wind_kph","wind_degree","wind_dir","pressure_mb","pressure_in","precip_mm","precip_in","humidity","cloud","feelslike_c","feelslike_f","vis_km","vis_miles","uv","gust_mph","gust_kph","updated_at","Date","lat","lon","query","c","WeatherState","types","model","number","string","actions","self","CityState","id","identifier","note","optional","currentWeather","maybeNull","views","isUpdated","now","getTime","isFavorite","getParentOfType","AppState","favoriteCities","findIndex","setCurrentWeather","create","setNote","LookupResultState","topCities","array","reference","lookup","lookupResult","lookupActiveIndex","findCity","get","addToTopCity","index","push","splice","removeFromTopCity","setTopCities","clear","forEach","cityRef","put","addToFavorite","removeFromFavorite","addCityWeather","removeCityWeather","delete","setLookupResult","result","setLookupActiveIndex","setLookup","getEnv","api","fetchLookup","undefined","updateCurrentWeather","Promise","all","values","fetchWeatherForCity","addedCity","init","length","fetchTopCities","fetchCity","storeContext","React","createContext","AppStateProvider","children","store","useLocalStore","createStore","Provider","value","useAppState","useContext","Error","appStore","localStorage","getItem","injection","JSON","parse","err","error","onSnapshot","snapshot","setItem","stringify","NoMatch","lazy","Home","CityWeather","useStyles","createUseStyles","theme","html","backgroundColor","color","body","margin","textDecoration","fontFamily","boxSizing","WebkitFontSmoothing","MozOsxFontSmoothing","WebkitTextSizeAdjust","App","useTheme","path","DefaultLoadingIndicator","Boolean","window","hostname","match","resources","en","translation","de","i18n","use","initReactI18next","lng","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0d738d59.chunk.js","sourcesContent":["export { createUseStyles, useTheme } from 'react-jss';\n\nexport const lightTheme = {\n  background: {\n    main: '#fafafa',\n  },\n  primary: {\n    main: '#3d5afe',\n    light: '#8187ff',\n    dark: '#0031ca',\n    text: '#fff'\n  },\n  secondary: {\n    main: '#455a64',\n    light: '#718792',\n    dark: '#1c313a',\n    text: '#fff',\n  },\n  action: {\n    active: '#333333',\n    disabled: '#999999',\n  },\n  border: {\n    main: '#999999',\n  },\n  icon: {\n    main: '#333333',\n  },\n  text: {\n    primary: '#333333',\n    secondary: '#666666',\n  },\n  temperature: {\n    cold: 'blue',\n    warm: 'red',\n  },\n  mobileBreakPoint: 480,\n  tabletBreakPoint: 1024,\n}\n\nexport type Theme = typeof lightTheme;\n\n","\nexport interface IWeatherData {\n  city: ICity,\n  current: {\n    \"last_updated_epoch\": number,\n    \"last_updated\": string,\n    \"temp_c\": number,\n    \"temp_f\": number,\n    \"is_day\": number,\n    \"condition\": {\n      \"text\": string,\n      \"icon\": string,\n      \"code\": number,\n    },\n    \"wind_mph\": number,\n    \"wind_kph\": number,\n    \"wind_degree\": number,\n    \"wind_dir\": string,\n    \"pressure_mb\": number,\n    \"pressure_in\": number,\n    \"precip_mm\": number,\n    \"precip_in\": number,\n    \"humidity\": number,\n    \"cloud\": number,\n    \"feelslike_c\": number,\n    \"feelslike_f\": number,\n    \"vis_km\": number,\n    \"vis_miles\": number,\n    \"uv\": number,\n    \"gust_mph\": number,\n    \"gust_kph\": number,\n    updated_at: Date,\n  }\n}\n\nexport interface ICity {\n  name: string,\n  country: string,\n  region: string,\n}\n\nexport class AppApi {\n  private WeatherAPIKey: string;\n\n  constructor() {\n    // Setting api key in front-end is a bad practice and not secure,\n    // but as the requirement is to avoid having back-end there is no other way \n    this.WeatherAPIKey = process.env.REACT_APP_WEATHERAPI_API_KEY || '';\n  }\n\n  async fetchTopCities(): Promise<ICity[] | undefined> {\n    const url = `https://public.opendatasoft.com/api/records/1.0/search/?dataset=worldcitiespop&q=&rows=15&sort=population&facet=country`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json() as { records: any[] };\n      const cities = data?.records?.map((r: any) => ({\n        name: (r?.fields?.accentcity || r?.fields?.name) as string,\n        country: r?.fields?.country as string,\n        region: r?.fields?.region as string,\n      })).sort((a, b) => a.name.localeCompare(b.name));\n      return cities;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async fetchWeatherForCity(cityName: string): Promise<IWeatherData | undefined> {\n    const url = `https://api.weatherapi.com/v1/current.json?key=${this.WeatherAPIKey}&q=${cityName}`;\n    // docs under https://www.weatherapi.com/api-explorer.aspx\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      const weather = {\n        city: {\n          name: data.location.name,\n          country: data.location.country,\n          region: data.location.region,\n        },\n        current: {\n          \"last_updated_epoch\": data.current.last_updated_epoch,\n          \"last_updated\": data.current.last_updated,\n          \"temp_c\": data.current.temp_c,\n          \"temp_f\": data.current.temp_f,\n          \"is_day\": data.current.is_day,\n          \"condition\": {\n            \"text\": data.current.condition.text,\n            \"icon\": data.current.condition.icon,\n            \"code\": data.current.condition.code,\n          },\n          \"wind_mph\": data.current.wind_mph,\n          \"wind_kph\": data.current.wind_kph,\n          \"wind_degree\": data.current.wind_degree,\n          \"wind_dir\": data.current.wind_dir,\n          \"pressure_mb\": data.current.pressure_mb,\n          \"pressure_in\": data.current.pressure_in,\n          \"precip_mm\": data.current.precip_mm,\n          \"precip_in\": data.current.precip_in,\n          \"humidity\": data.current.humidity,\n          \"cloud\": data.current.cloud,\n          \"feelslike_c\": data.current.feelslike_c,\n          \"feelslike_f\": data.current.feelslike_f,\n          \"vis_km\": data.current.vis_km,\n          \"vis_miles\": data.current.vis_miles,\n          \"uv\": data.current.uv,\n          \"gust_mph\": data.current.gust_mph,\n          \"gust_kph\": data.current.gust_kph,\n          updated_at: new Date(),\n        }\n      };\n      return weather;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async fetchWeatherForLocation(lat: number, lon: number): Promise<IWeatherData | undefined> {\n    // const url = `https://api.weatherapi.com/v1/current.json?key=${this.WeatherAPIKey}&query=${lat},${lon}`;\n    return;\n  }\n\n  async fetchWeatherForMyIP(): Promise<IWeatherData | undefined> {\n    // const url = `https://api.weatherapi.com/v1/current.json?key=${this.WeatherAPIKey}&query=fetch:ip`;\n    return;\n  }\n\n  async fetchLookup(query: string): Promise<ICity[] | undefined> {\n    const url = `https://api.weatherapi.com/v1/search.json?key=${this.WeatherAPIKey}&q=${query}`;\n    try {\n      const response = await fetch(url);\n      const data = await response.json() as any[];\n      const cities = data.map( c => ({\n        name: c.name,\n        region: c.region,\n        country: c.country,\n      }));\n      return cities;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n}","import React from 'react';\nimport { useLocalStore } from 'mobx-react-lite';\nimport { types, Instance, SnapshotIn, onSnapshot, getParentOfType, getEnv } from \"mobx-state-tree\";\nimport { AppApi, ICity, IWeatherData } from '../api/AppApi';\n\nconst WeatherDataTTL = 10 * 60 * 1000;\n\nexport const WeatherState = types\n  .model(\"WeatherState\", {\n    \"last_updated_epoch\": types.number,\n    \"last_updated\": types.string,\n    \"temp_c\": types.number,\n    \"temp_f\": types.number,\n    \"is_day\": types.number,\n    \"condition\": types.model({\n        \"text\": types.string,\n        \"icon\": types.string,\n        \"code\": types.number,\n    }),\n    \"wind_mph\": types.number,\n    \"wind_kph\": types.number,\n    \"wind_degree\": types.number,\n    \"wind_dir\": types.string,\n    \"pressure_mb\": types.number,\n    \"pressure_in\": types.number,\n    \"precip_mm\": types.number,\n    \"precip_in\": types.number,\n    \"humidity\": types.number,\n    \"cloud\": types.number,\n    \"feelslike_c\": types.number,\n    \"feelslike_f\": types.number,\n    \"vis_km\": types.number,\n    \"vis_miles\": types.number,\n    \"uv\": types.number,\n    \"gust_mph\": types.number,\n    \"gust_kph\": types.number,\n    updated_at: types.Date,\n  })\n  .actions(self => {\n    return {\n    }\n  });\n\nexport const CityState = types\n  .model(\"CityState\", {\n    id: types.identifier,\n    name: types.string,\n    country: types.string,\n    region: types.string,\n    note: types.optional(types.string, ''),\n    currentWeather: types.maybeNull(WeatherState),\n  })\n  .views(self => {\n    return {\n      isUpdated(now: Date){\n        return now.getTime() - (self.currentWeather?.updated_at.getTime() || 0) < WeatherDataTTL;\n      },\n      isFavorite(): boolean{\n        const parent = getParentOfType(self, AppState);\n        const index = parent.favoriteCities.findIndex( c => c === self);\n        return index !== -1;\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      setCurrentWeather(weather: IWeatherData){\n        self.currentWeather = WeatherState.create(weather.current);\n      },\n      setNote(note: string){\n        self.note = note;\n      }\n    }\n  });\n\nexport const LookupResultState = types\n  .model(\"LookupResultState\", {\n    name: types.string,\n    country: types.string,\n    region: types.string,\n  });\n\nexport const AppState = types\n  .model(\"AppState\", {\n    topCities: types.array(types.reference(CityState)),\n    favoriteCities: types.array(types.reference(CityState)),\n    cities: types.map(CityState),\n    lookup: types.optional(types.string, ''),\n    lookupResult: types.array(LookupResultState),\n    lookupActiveIndex: types.maybeNull(types.number),\n  })\n  .views(self => {\n    return {\n      findCity(country: string, region: string, name: string): ICityState | undefined{\n        const city = self.cities.get(`${country}/${region}/${name}`);\n        return city;\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      addToTopCity(city: ICityState) {\n        const index = self.topCities.findIndex( c => c.name.localeCompare(city.name) > 0);\n        if(index === -1){\n          self.topCities.push(city);\n        }else{\n          self.topCities.splice(index, 0, city);\n        }\n      },\n      removeFromTopCity(city: ICityState) {\n        const index = self.topCities.findIndex( c => c === city);\n        if(index !== -1){\n          self.topCities.splice(index, 1);\n        }\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      setTopCities(cities: ICity[]) {\n        self.topCities.clear();\n        cities.forEach( city => {\n          const cityRef = self.cities.put(CityState.create({\n            id: `${city.country}/${city.region}/${city.name}`,\n            name: city.name,\n            country: city.country,\n            region: city.region,\n          }));\n          if(!cityRef.isFavorite()){\n            self.topCities.push(cityRef);\n          }\n        });\n      },\n      addToFavorite(city: ICityState) {\n        const index = self.favoriteCities.findIndex( c => c.name.localeCompare(city.name) > 0);\n        if(index === -1){\n          self.favoriteCities.push(city);\n        }else{\n          self.favoriteCities.splice(index, 0, city);\n        }\n        self.removeFromTopCity(city);\n      },\n      removeFromFavorite(city: ICityState) {\n        const index = self.favoriteCities.findIndex( c => c === city);\n        if(index !== -1){\n          self.favoriteCities.splice(index, 1);\n        }\n      },\n      addCityWeather(weather: IWeatherData): ICityState{\n        const cityRef = self.cities.put(CityState.create({\n          id: `${weather.city.country}/${weather.city.region}/${weather.city.name}`,\n          name: weather.city.name,\n          country: weather.city.country,\n          region: weather.city.region,\n          currentWeather: WeatherState.create(weather.current),\n        }));\n        return cityRef;\n      },\n      removeCityWeather(city: ICityState){\n        self.cities.delete(city.id);\n      },\n      setLookupResult(result?: ICity[]){\n        self.lookupResult.clear();\n        self.lookupActiveIndex = null;\n        result && self.lookupResult.push(...result);\n      },\n      setLookupActiveIndex(index: number | null){\n        self.lookupActiveIndex = index;\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      async setLookup(query: string) {\n        self.lookup = query;\n        if(query){\n          const result = await getEnv<EnvType>(self).api.fetchLookup(query);\n          if(self.lookup === query){\n            self.setLookupResult(result);\n          }\n        }else{\n          self.setLookupResult(undefined);\n        }\n      },\n      async updateCurrentWeather(){\n        const api = getEnv<EnvType>(self).api;\n        const now = new Date();\n        await Promise.all([...self.cities.values()].map( async (city) => {\n          if(city.isUpdated(now)){\n            return;\n          }\n          const weather = await api.fetchWeatherForCity(city.name);\n          if(weather){\n            if(`${weather.city.country}/${weather.city.region}/${weather.city.name}` === city.id){\n              city.setCurrentWeather(weather);\n            }else{\n              const addedCity = self.addCityWeather(weather);\n              self.removeFromTopCity(city);\n              self.removeFromFavorite(city);\n              self.removeCityWeather(city);\n              self.addToTopCity(addedCity);\n            }\n          }\n        }));\n      },\n    }\n  })\n  .actions(self => {\n    return {\n      async init() {\n        if(!self.topCities?.length){\n          const cities = await getEnv<EnvType>(self).api.fetchTopCities();\n          if(cities){\n            self.setTopCities(cities);\n          }\n        }\n        await self.updateCurrentWeather();\n      },\n      async fetchCity(cityName: string): Promise<ICityState | undefined>{\n        const weather = await getEnv<EnvType>(self).api.fetchWeatherForCity(cityName);\n        if(weather){\n          const city = self.addCityWeather(weather);\n          return city;\n        }\n      }\n    }\n  });\n\nconst storeContext = React.createContext<IAppState | null>(null);\n\nexport const AppStateProvider: React.FunctionComponent = ({ children }) => {\n  const store = useLocalStore(createStore)\n  return <storeContext.Provider value={store}>{children}</storeContext.Provider>\n}\n\nexport const useAppState = () => {\n  const store = React.useContext(storeContext)\n  if (!store) {\n    // this is especially useful in TypeScript so you don't need to be checking for null all the time\n    throw new Error('useStore must be used within a StoreProvider.')\n  }\n  return store\n}\n\nexport type EnvType = {\n  api: AppApi,\n}\n\nexport function createStore() {\n  const appStore = localStorage.getItem('app-store');\n\n  const injection: EnvType = {\n    api: new AppApi(),\n  }\n\n  let store;\n  try {\n    store = AppState.create(appStore ? JSON.parse(appStore) : emptyStore(), injection);\n  } catch (err) {\n    console.error('could not restore, with the following error. fallback to empty store.');\n    console.error(err);\n    store = AppState.create(emptyStore(), injection);\n  }\n  onSnapshot(store, snapshot => {\n    localStorage.setItem('app-store', JSON.stringify(snapshot));\n  });\n\n  return store;\n}\n\nfunction emptyStore(): IAppStateSnapshot {\n  return {};\n}\n\nexport interface IAppState extends Instance<typeof AppState> { };\nexport interface IAppStateSnapshot extends SnapshotIn<typeof AppState> { };\nexport interface ICityState extends Instance<typeof CityState> { };\nexport interface IWeatherState extends Instance<typeof WeatherState> { };","import React, { lazy } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { createUseStyles, useTheme, Theme } from './theme';\nimport { AppStateProvider } from './state/weather-state';\n\nconst NoMatch = lazy(() => import('./pages/NoMatch'));\nconst Home = lazy(() => import('./pages/Home'));\nconst CityWeather = lazy(() => import('./pages/CityWeather'));\n\nconst useStyles = createUseStyles<Theme>(theme => ({\n  '@global': {\n    html: {\n      backgroundColor: theme.background,\n      color: theme.text.primary,\n    },\n    body: {\n      margin: 0,\n    },\n    a: {\n      textDecoration: 'none',\n      color: theme.text.primary,\n    },\n    'html *': {\n      fontFamily: 'Yekan Bakh',\n      boxSizing: 'border-box',\n      WebkitFontSmoothing: 'antialiased', // Antialiasing.\n      MozOsxFontSmoothing: 'grayscale', // Antialiasing.\n      // Fix font resize problem in iOS\n      WebkitTextSizeAdjust: '100%',\n    },\n  },\n\n}));\n\nconst App: React.FC = () => {\n\n  const theme = useTheme();\n  useStyles({ theme });\n\n  return (\n    <AppStateProvider >\n      <Router>\n        <Switch>\n          <Route path=\"/city/:country/:region/:name\">\n            <CityWeather />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"*\">\n            <NoMatch />\n          </Route>\n        </Switch>\n      </Router>\n    </AppStateProvider>\n  );\n}\n\nexport default App;\n\nexport const DefaultLoadingIndicator = () => (\n  <div>\n    Loading...\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport { en } from \"./en\";\nimport { de } from \"./de\";\n\n// the translations\nconst resources = {\n  en,\n  de,\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  });\n\n  export default i18n;","export const en = {\n  translation: {\n    \"home\": \"Home\",\n    \"city_weather_details\": \"City Weather Details\",\n    \"top_city_list_title\": \"Top Cities\",\n    \"favorite_city_list_title\": \"Favorite Cities\",\n    \"feels_like\": \"Feels like\",\n    \"kph\": \"km/h\",\n    \"gust\": \"Gust\",\n    \"uv\": \"UV factor\",\n    \"humidity\": \"Humidity\",\n    \"vis\": \"Visibility\",\n    \"precip\": \"Precipitation\",\n    \"pressure\": \"Pressure\",\n    \"km\": \"Km\",\n    \"mm\": \"mm\",\n    \"mb\": \"hPa\",\n    \"note\": \"Note\",\n  }\n}","export const de = {\n  translation: {\n    \"ttest\": \"Das wetter\"\n  }\n}","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport App, { DefaultLoadingIndicator } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'react-jss';\nimport {lightTheme} from './theme';\nimport './locale/i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={lightTheme}>\n      <Suspense fallback={<DefaultLoadingIndicator />}>\n        <App />\n      </Suspense>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}