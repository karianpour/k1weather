{"version":3,"sources":["theme.tsx","App.tsx","serviceWorker.ts","locale/i18n.tsx","locale/en.tsx","locale/de.tsx","index.tsx"],"names":["theme","colorPrimary","colorSecondary","textPrimary","textSecondary","background","NoMatch","lazy","Home","CityWeather","useStyles","createUseStyles","html","backgroundColor","body","margin","fontFamily","App","useTheme","path","DefaultLoadingIndicator","Boolean","window","location","hostname","match","resources","en","translation","de","i18n","use","initReactI18next","init","lng","interpolation","escapeValue","ReactDOM","render","StrictMode","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAA,sHAEO,IAAMA,EAAQ,CAAGC,aAAc,QACpCC,eAAgB,MAChBC,YAAa,OACbC,cAAe,OACfC,WAAY,S,uICERC,EAAUC,gBAAK,kBAAM,gCACrBC,EAAOD,gBAAK,kBAAM,gCAClBE,EAAcF,gBAAK,kBAAM,gCAEzBG,EAAYC,aAAuB,SAAAX,GAAK,MAAK,CACjD,UAAW,CACTY,KAAM,CACJC,gBAAiBb,EAAMK,YAEzBS,KAAK,CACHC,OAAQ,GAEV,SAAU,CACRC,WAAY,mBA4BHC,EAtBO,WAEpB,IAAMjB,EAAQkB,cAGd,OAFAR,EAAU,CAACV,UAGT,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,eACV,kBAACV,EAAD,OAEF,kBAAC,IAAD,CAAOU,KAAK,KACV,kBAACX,EAAD,OAEF,kBAAC,IAAD,CAAOW,KAAK,KACV,kBAACb,EAAD,UASGc,EAA0B,kBACrC,4CCxCkBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCZAC,EAAY,CAChBC,GCPgB,CAChBC,YAAa,CACX,MAAS,iBDMXC,GERgB,CAChBD,YAAa,CACX,MAAS,gBFSbE,IACGC,IAAIC,KACJC,KAAK,CACJP,YACAQ,IAAK,KAELC,cAAe,CACbC,aAAa,KAIFN,EAAf,EGdFO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAevC,MAAOA,KACpB,kBAAC,WAAD,CAAUwC,SAAU,kBAAC,EAAD,OAClB,kBAAC,EAAD,SAINC,SAASC,eAAe,SJ2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.420cec98.chunk.js","sourcesContent":["export { createUseStyles, useTheme } from 'react-jss';\n\nexport const theme = {  colorPrimary: \"green\",\n  colorSecondary: \"red\",\n  textPrimary: \"#ccc\",\n  textSecondary: \"#eee\",\n  background: '#eee',\n}\n\nexport type Theme = typeof theme;\n\n","import React, { lazy } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport { createUseStyles, useTheme, Theme } from './theme';\n\nconst NoMatch = lazy(() => import('./pages/NoMatch'));\nconst Home = lazy(() => import('./pages/Home'));\nconst CityWeather = lazy(() => import('./pages/CityWeather'));\n\nconst useStyles = createUseStyles<Theme>(theme => ({\n  '@global': {\n    html: {\n      backgroundColor: theme.background,\n    },\n    body:{\n      margin: 0,\n    },\n    'html *': {\n      fontFamily: 'Yekan Bakh',\n    },\n  },\n\n}));\n\nconst App: React.FC = () => {\n\n  const theme = useTheme();\n  useStyles({theme});\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/city/:name\">\n          <CityWeather/>\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"*\">\n          <NoMatch />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n\nexport const DefaultLoadingIndicator = () => (\n  <div>\n    Loading...\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport { en } from \"./en\";\nimport { de } from \"./de\";\n\n// the translations\nconst resources = {\n  en,\n  de,\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  });\n\n  export default i18n;","export const en = {\n  translation: {\n    \"ttest\": \"TWeathr Test\"\n  }\n}","export const de = {\n  translation: {\n    \"ttest\": \"Das wetter\"\n  }\n}","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport App, { DefaultLoadingIndicator } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'react-jss';\nimport {theme} from './theme';\nimport './locale/i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <Suspense fallback={<DefaultLoadingIndicator />}>\n        <App />\n      </Suspense>\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}